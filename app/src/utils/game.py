from asyncio import (
    Task,
    create_task as asyncio_create_task,
    gather as asyncio_gather,
    sleep as asyncio_sleep,
)
from datetime import (
    datetime,
    timedelta,
)
from typing import Any
from random import (
    choice,
    shuffle,
)

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import (
    StatesGroup,
    State,
)
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from apscheduler.jobstores.base import JobLookupError

from app.src.bot.bot import bot
from app.src.bot.routers.start import command_start
from app.src.config.config import (
    TimeIntervals,
    Timezones,
)
from app.src.crud.user import user_crud
from app.src.crud.user_achievement import user_achievement_crud
from app.src.crud.user_statistic import user_statistic_crud
from app.src.database.database import (
    RedisKeys,
    async_session_maker,
)
from app.src.models.user import User
from app.src.models.user_achievement import UserAchievement
from app.src.models.user_statistic import UserStatistic
from app.src.scheduler.scheduler import (
    SchedulerJobNames,
    scheduler,
)
from app.src.utils.image import (
    get_role_image_cards,
    get_shuffled_words_cards,
)
from app.src.utils.message import (
    MessagesEvents,
    delete_messages_list,
    set_user_messages_to_delete,
    delete_user_messages,
)
from app.src.utils.reply_keyboard import (
    RoutersCommands,
    make_row_keyboard,
    KEYBOARD_HOME,
    KEYBOARD_LOBBY_SUPERVISOR,
    KEYBOARD_LOBBY_SUPERVISOR_IN_GAME,
    KEYBOARD_YES_NO,
    KEYBOARD_LOBBY_SUPERVISOR_IN_GAME_RETELL,
    KEYBOARD_LOBBY_SUPERVISOR_IN_GAME_RETELL_FAIL,
)
from app.src.utils.redis_app import (
    redis_check_exists,
    redis_delete,
    redis_get,
    redis_set,
    redis_sset_process,
)
from app.src.validators.game import (
    GameParams,
    GameRoles,
    GameStatus,
)
from app.src.validators.user import UserAchievementDescription

# INFO. –°–ª–æ–≤–∞—Ä—å —Å –∏–≥—Ä–æ–π –≤ –∫–æ–Ω–µ—á–Ω–æ —Ñ–æ—Ä–º–µ (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Redis):
# game = {
#     'number': '1234',
#     'password': '1234',
#     'redis_key': src_game_lobby_1234',
#     'status': lobby,
#
#     'host_chat_id': 87654321,
#     'host_lobby_message_id': 123,
#
#     'card_index: 0,
#
#     'players': {
#         '12345678': {
#             'name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (@iVan)',
#             'chat_id': 87654321,
#             'id: 1,
#
#             'role': 'buka',
#             'statistic': {
#                   'top_penalties': 0,
#                   'top_score_buka': 0,
#                   'top_score_fairy': 0,
#                   'top_score_sandman': 0,
#                   'top_score_dreamer': 0,
#             },
#             'achievements': {},
#         },
#         ...
#     },
#
#     'players_dreaming_order': [12345678, 56781234, ...],
#     'dreamer_index': 0,
#     'supervisor_index': 1,
#
#     'last_check_answer_datetime': '2021-11-01 00:00:00.000000',
#     'round_correct_count': 0,
#     'round_incorrect_count': 0,
#     'round_user_retell_dream_correct': True,
#     'round_correct_words': ['word1', 'word2', 'word3', ...],
# }

# INFO. –°–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Redis):
# # TODO. –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç. –í –∏–≥—Ä–µ —É—á–∞—Å—Ç–≤—É–µ—Ç N –∏–≥—Ä–æ–∫–æ–≤,
#         –≤ —Ä–∞—É–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ N —Å–ª–æ–≤, —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ N*M —Å–ª–æ–≤.
# 'game_cards_ids': {
#     0: ('word_name', 1234),
#     1: ('word_name, 1235),
#     ...
# },


class GameForm(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–æ—É—Ç–µ—Ä–∞.
    """

    in_lobby = State()
    in_lobby_select_game = State()
    in_lobby_enter_password = State()
    in_game = State()
    in_game_destroy_game = State()
    in_game_drop_game = State()
    in_game_set_penalty = State()


# -----------------------------------------------------------------------------
# INFO. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–≥—Ä—ã (–ª–æ–±–±–∏).
# -----------------------------------------------------------------------------


NUMS_EMOJI: dict[str, str] = {
    1: '1Ô∏è‚É£',
    2: '2Ô∏è‚É£',
    3: '3Ô∏è‚É£',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£',
    6: '6Ô∏è‚É£',
    7: '7Ô∏è‚É£',
    8: '8Ô∏è‚É£',
    9: '9Ô∏è‚É£',
    10: 'üîü',
}


def form_lobby_host_message(game: dict[str, Any]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ö–æ—Å—Ç–∞ –ª–æ–±–±–∏."""
    return '\n'.join(
        f'{NUMS_EMOJI[i + 1]} {player["name"]}'
        for i, player in enumerate(game['players'].values())
    )


def process_avaliable_game_numbers(
    get: bool = False,
    add_number: str | None = None,
    remove_number: str | None = None,
) -> list[str] | None:
    """
    –ò—Å–ø–æ–ª—å–∑—É—è Redis Set, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç
    —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä.
    """
    return redis_sset_process(
        key=RedisKeys.GAME_LOBBIES_AVALIABLE,
        get=get,
        add_value=add_number,
        remove_value=remove_number,
    )


async def send_game_start_messages(game: dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã."""

    async def __set_players_last_game_datetime(
        id_telegram: str | int,
        datetime_now: datetime,
    ) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–∏ÃÜ –∏–≥—Ä—ã —É –∏–≥—Ä–æ–∫–∞."""
        async with async_session_maker() as session:
            await user_statistic_crud.update_by_user_id_telegram(
                user_id_telegram=id_telegram,
                obj_data={'last_game_datetime': datetime_now},
                session=session,
                perform_check_unique=False,
            )

    async def __send_game_start_message(chat_id: int) -> None:
        """–ó–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã."""
        await delete_user_messages(chat_id=chat_id, event_key=MessagesEvents.IN_LOBBY)

        messages_ids: list[int] = []
        for t in (
            '–¢–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑..',
            '3..',
            '2..',
            '1..',
            '–°–µ–π—á–∞—Å! ‚ú®',
        ):
            message: Message = await bot.send_message(
                chat_id=chat_id,
                text=t,
                reply_markup=ReplyKeyboardRemove(),
            )
            messages_ids.append(message.message_id)
            await asyncio_sleep(2)
        await delete_messages_list(chat_id=chat_id, messages_ids=messages_ids)

    datetime_now: datetime = datetime.now(tz=Timezones.MOSCOW)
    tasks: list[Task] = [
        asyncio_create_task(__send_game_start_message(chat_id=data['chat_id']))
        for data in game['players'].values()
    ] + [
        asyncio_create_task(
            __set_players_last_game_datetime(
                id_telegram=data['chat_id'],
                datetime_now=datetime_now,
            ),
        )
        for data in game['players'].values()
    ]
    await asyncio_gather(*tasks)


async def setup_game_data(game: dict[str, Any]) -> None:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã."""
    for k in ('host_chat_id', 'host_lobby_message_id'):
        del game[k]
    game_cards_ids: list[str, str] = await get_shuffled_words_cards()
    redis_set(
        key=RedisKeys.GAME_WORDS.format(number=game['number']),
        value=game_cards_ids,
    )
    game.update(
        {
            'status': GameStatus.PREPARE_NEXT_ROUND,

            'card_index': 0,

            'players_dreaming_order': __get_players_dreaming_order(players=list(game['players'].keys())),
            'dreamer_index': 0,
            'supervisor_index': 1,

            'last_check_answer_datetime': '2001-01-01 00:00:00.000000',
            'round_correct_count': 0,
            'round_incorrect_count': 0,
            'round_user_retell_dream_correct': False,
            'round_correct_words': [],
        },
    )
    for data in game['players'].values():
        data.update(
            {
                'statistic': {
                    'top_penalties': 0,
                    'top_score_buka': 0,
                    'top_score_dreamer': 0,
                    'top_score_fairy': 0,
                    'top_score_sandman': 0,
                },
                'achievements': {},
            },
        )
    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)


# -----------------------------------------------------------------------------
# INFO. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ö–æ–¥–µ –∏–≥—Ä—ã.
# -----------------------------------------------------------------------------


async def process_in_game(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ö–æ–¥–µ –∏–≥—Ä—ã."""
    game: dict[str, Any] = await process_game_in_redis(message=message, get=True)
    state_value: str = await state.get_state()
    if not await __process_in_game_validate_message_text(
        game=game,
        message=message,
        state_value=state_value,
    ):
        await process_game_in_redis(redis_key=game['redis_key'], release=True)
        return await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))

    # INFO. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–π.
    if state_value == GameForm.in_game_destroy_game:
        return await process_in_game_destroy_game_confirm(game=game, message=message, state=state)
    elif state_value == GameForm.in_game_drop_game:
        return await __process_in_game_drop_game_confirm(game=game, message=message, state=state)
    elif state_value == GameForm.in_game_set_penalty:
        return await __process_in_game_set_penalty_confirm(game=game, message=message, state=state)
    elif game['status'] == GameStatus.WAIT_DREAMER_RETAILS:
        return await __process_in_game_end_round_ask_for_retail_confirm(game=game, message=message)

    # INFO. –§–∏–∫—Å–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–Ω–æ–≤–∏–¥—Ü–∞.
    elif message.text == RoutersCommands.WORD_CORRECT:
        await __process_in_game_answer(game=game, is_correct=True, message=message)
    elif message.text == RoutersCommands.WORD_INCORRECT:
        await __process_in_game_answer(game=game, is_correct=False, message=message)

    # INFO. –í—ã–¥–∞—á–∞ —à—Ç—Ä–∞—Ñ–∞ –∏–≥—Ä–æ–∫—É.
    elif message.text == RoutersCommands.PENALTY:
        await __process_in_game_set_penalty(game=game, message=message, state=state)

    # INFO. –ù–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.
    elif message.text == RoutersCommands.START_ROUND:
        await __process_in_game_start_round(game=game, message=message)

    # INFO. –í—ã—Ö–æ–¥ –∏–∑ / —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–≥—Ä—ã.
    elif message.text == RoutersCommands.GAME_DESTROY:
        await process_game_in_redis(redis_key=game['redis_key'], release=True)
        await __process_in_game_destroy_game(message=message, state=state)
    elif message.text == RoutersCommands.GAME_DROP:
        await process_game_in_redis(redis_key=game['redis_key'], release=True)
        await __process_in_game_drop_game(message=message, state=state)
    elif message.text == RoutersCommands.HOME:
        await __process_in_game_home(game=game, message=message, state=state)


async def __process_in_game_validate_message_text(
    game: dict[str, Any],
    message: Message,
    state_value: str,
) -> bool:
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ö–æ–¥–µ –∏–≥—Ä—ã."""
    # INFO. –ò–≥—Ä–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ—Ç—É –∏–∑ –æ—Å–æ–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è GameForm,
    #       —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    #       –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ.
    if state_value in (
        GameForm.in_game_drop_game,
        GameForm.in_game_destroy_game,
        GameForm.in_game_set_penalty,
    ):
        return True

    # INFO. –ú–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏ –æ—Ç –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è GameForm.in_lobby!),
    #       –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ game['status'] == GameStatus.FINISHED
    #       (–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –ª—é–±–æ–π –ø—Ä–∏—á–∏–Ω–µ).
    if game['status'] in (GameStatus.FINISHED, GameStatus.IN_LOBBY):
        if message.text == RoutersCommands.HOME:
            return True

    # INFO. –ú–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏ –æ—Ç –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
    elif message.text == RoutersCommands.GAME_DROP:
        return True


    # INFO. –ú–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏ —Ç–æ–ª—å–∫–æ –æ—Ç "supervisor" –∏–≥—Ä–æ–∫–∞, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç KEYBOARD –∫–æ–º–∞–Ω–¥.
    elif (
        game['status'] == GameStatus.WAIT_DREAMER_RETAILS
        and
        str(message.from_user.id) == game['players_dreaming_order'][game['supervisor_index']]
    ):
        return True

    # INFO. –ú–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏ —Ç–æ–ª—å–∫–æ –æ—Ç "supervisor" –∏–≥—Ä–æ–∫–∞.
    elif message.text in (
        RoutersCommands.WORD_CORRECT,
        RoutersCommands.WORD_INCORRECT,
        RoutersCommands.PENALTY,
        # INFO. –ú–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ game['status'] == GameStatus.PREPARE_NEXT_ROUND.
        RoutersCommands.START_ROUND,
        RoutersCommands.GAME_DESTROY,
        RoutersCommands.HOME,
    ):
        if str(message.from_user.id) == game['players_dreaming_order'][game['supervisor_index']]:
            if message.text == RoutersCommands.START_ROUND:
                if game['status'] == GameStatus.PREPARE_NEXT_ROUND:
                    return True
            else:
                return True

    return False


async def __process_in_game_destroy_game(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"."""
    await state.set_state(state=GameForm.in_game_destroy_game)
    answer: Message = await message.answer(
        text='–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –≤—Å–µ—Ö —Ä–∞–∑–±—É–¥–∏—Ç—å?',
        reply_markup=KEYBOARD_YES_NO,
    )
    await set_user_messages_to_delete(
        event_key=MessagesEvents.GAME_DESTROY,
        messages=[message, answer],
    )


async def process_in_game_destroy_game_confirm(
    message: Message,
    state: FSMContext,
    game: dict[str, Any] | None = None,
    from_lobby: bool = False,
    from_drop_game: bool = False,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"."""

    # TODO. –ù–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å answer –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –°–µ–π—á–∞—Å —É–¥–∞–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ range() –≤ callback.
    async def __send_destroy_game_message(
        data: dict[str, Any],
        supervisor_chat_id: int,
        from_drop_game: bool,
    ) -> None:
        """–ó–∞–¥–∞—á–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –∏–≥—Ä–æ–∫–æ–≤ –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã."""
        if from_drop_game:
            text: str = __choose_drop_game_text(is_run_out_of_players=True)
        elif data['chat_id'] == str(supervisor_chat_id):
            text: str = '–°–æ–Ω –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω..'
        else:
            text: str = '–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–Ω–∞ –ø—Ä–µ—Ä–≤–∞–ª —Ç–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ..'
        answer: Message = await bot.send_message(
            chat_id=data['chat_id'],
            text=text,
            reply_markup=KEYBOARD_HOME,
        )
        await set_user_messages_to_delete(
            event_key=MessagesEvents.GAME_DESTROY,
            messages=[answer],
        )

    # INFO. –¢–∞–∫–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ –ª–æ–±–±–∏.
    if not game:
        game: dict[str, Any] = await process_game_in_redis(message=message, get=True)

    await delete_messages_list(
        chat_id=message.chat.id,
        messages_ids=(message.message_id,),
    )

    # INFO. –ò–∑ –ª–æ–±–±–∏ –∏–ª–∏ –∫–æ–≥–¥–∞ –≤ –∏–≥—Ä–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ª—é–¥–µ–π - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    if not from_lobby and not from_drop_game:
        if message.text not in (RoutersCommands.YES, RoutersCommands.NO):
            return await process_game_in_redis(redis_key=game['redis_key'], release=True)
        elif message.text == RoutersCommands.NO:
            await state.set_state(state=GameForm.in_game)
            # INFO. –ó–∞—Ç—Ä–µ—Ç—Å—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏ –≤—ã—Å–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
            for k in (MessagesEvents.GAME_DESTROY, MessagesEvents.ROLE):
                await delete_user_messages(chat_id=message.chat.id, event_key=k)
            return await __send_game_role_message(
                data={
                    'role': game['players'][str(message.from_user.id)]['role'],
                    'chat_id': str(message.chat.id),
                },
                roles_images=await get_role_image_cards(),
                supervisor_id_telegram=game['players_dreaming_order'][game['supervisor_index']],
            )

    if from_drop_game:
        game['players'].pop(str(message.from_user.id), None)
    game['status'] = GameStatus.FINISHED
    await delete_user_messages(chat_id=message.chat.id, event_key=MessagesEvents.GAME_DESTROY)
    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)
    process_avaliable_game_numbers(remove_number=game['number'])

    if not from_lobby:
        try:
            scheduler.remove_job(job_id=SchedulerJobNames.GAME_END_ROUND.format(number=game['number']))
        except JobLookupError:
            pass

    # INFO. –î–∞–∂–µ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ –ª–æ–±–±–∏, –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ GameForm.in_game,
    #       —á—Ç–æ–±—ã –æ–Ω —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É "RoutersCommands.HOME".
    await state.set_state(state=GameForm.in_game)

    tasks: tuple[Task] = (
        asyncio_create_task(
            __send_destroy_game_message(
                data=data,
                supervisor_chat_id=message.chat.id,
                from_drop_game=from_drop_game,
            ),
        )
        for data in game['players'].values()
    )
    await asyncio_gather(*tasks)


async def __process_in_game_drop_game(
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã"."""
    await state.set_state(state=GameForm.in_game_drop_game)
    answer: Message = await message.answer(
        text=(
            '–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è?'
            '\n\n'
            '‚ùóÔ∏è–£—á—Ç–∏, —á—Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç–µ–±–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω '
            '–≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã! –ï—Å–ª–∏ –≤—ã –≤—Å–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è - –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã '
            f'–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–Ω–∞ –Ω–∞–∂–∞–ª "{RoutersCommands.GAME_DESTROY}" - '
            '–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ—Ä—á–µ–Ω–∞ –Ω–∏ —É –∫–æ–≥–æ.'
        ),
        reply_markup=KEYBOARD_YES_NO,
    )
    await set_user_messages_to_delete(
        event_key=MessagesEvents.GAME_DROP,
        messages=[message, answer],
    )


# TODO: –î–æ–¥–µ–ª–∞—Ç—å
async def __process_in_game_drop_game_confirm(
    game: dict[str, Any],
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É "–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É"."""
    await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))

    if message.text not in (RoutersCommands.YES, RoutersCommands.NO):
        return

    if message.text == RoutersCommands.NO:
        await state.set_state(state=GameForm.in_game)
        # INFO. –ó–∞—Ç—Ä–µ—Ç—Å—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏ –≤—ã—Å–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
        for k in (MessagesEvents.GAME_DROP, MessagesEvents.ROLE):
            await delete_user_messages(chat_id=message.chat.id, event_key=k)
        return await __send_game_role_message(
            data={
                'role': game['players'][str(message.from_user.id)]['role'],
                'chat_id': str(message.chat.id),
            },
            roles_images=await get_role_image_cards(),
            supervisor_id_telegram=game['players_dreaming_order'][game['supervisor_index']],
        )

    async with async_session_maker() as session:
        # TODO. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.
        user: User = await user_crud.retrieve_by_id_telegram(
            obj_id_telegram=message.from_user.id,
            session=session,
        )
        current_statistic: UserStatistic = await user_statistic_crud.retrieve_by_user_id(
            user_id=user.id,
            session=session,
        )
        current_statistic.total_quits = current_statistic.total_quits + 1
        await session.commit()

    # INFO. -1 —Ç–∞–∫ –∫–∞–∫ –∏–∑ game –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.
    # TODO. –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ game –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ, –∞ –Ω–µ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –Ω–∏–∂–µ.
    if len(game['players']) - 1 < GameParams.PLAYERS_MIN:
        await process_in_game_destroy_game_confirm(message=message, state=state, game=game, from_drop_game=True)
    else:
        await __game_drop_move_indexes(game=game, message=message)

    await state.clear()
    answer: Message = await message.answer(
        text=__choose_drop_game_text(is_leave=True),
        reply_markup=ReplyKeyboardRemove(),
    )
    await delete_user_messages(chat_id=message.chat.id, all_event_keys=True)
    await asyncio_sleep(5)
    await delete_messages_list(chat_id=message.chat.id, messages_ids=(answer.message_id,))
    await command_start(message=message)


async def __process_in_game_set_penalty(
    game: dict[str, Any],
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–ü–µ–Ω–∞–ª—å—Ç–∏"."""
    await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))

    rows: list[tuple[str]] = (
        [(RoutersCommands.CANCEL,)]
        +
        [(player['name'],) for player in game['players'].values()]
    )
    answer: Message = await message.answer(
        text='–ö—Ç–æ –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –º–∏—Ä–∞ —Å–Ω–æ–≤?',
        reply_markup=make_row_keyboard(rows=rows),
    )
    await set_user_messages_to_delete(
        event_key=MessagesEvents.SET_PENALTY,
        messages=[answer],
    )
    await state.set_state(state=GameForm.in_game_set_penalty)

    redis_set(key=RedisKeys.GAME_SET_PENALTY.format(number=game['number']), value=1)
    await process_game_in_redis(redis_key=game['redis_key'], release=True)


# TODO. –ó–∞—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é.
async def __process_in_game_set_penalty_confirm(
    game: dict[str, Any],
    message: Message,
    state: FSMContext,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É "–í—ã–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ"."""

    async def __exit(game: dict[str, Any]) -> None:
        redis_delete(key=RedisKeys.GAME_SET_PENALTY.format(number=game['number']))
        await process_game_in_redis(redis_key=game['redis_key'], set_game=game)

        await state.set_state(state=GameForm.in_game)

        await delete_user_messages(chat_id=message.chat.id, event_key=MessagesEvents.SET_PENALTY)
        # INFO. –ó–∞—Ç—Ä–µ—Ç—Å—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏ –≤—ã—Å–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
        return await __send_new_word_to_player(
            id_telegram=str(message.from_user.id),
            data=game['players'][str(message.from_user.id)],
            game=game,
            game_cards_ids=redis_get(key=RedisKeys.GAME_WORDS.format(number=game['number'])),
            send_supervisor_keyboard=True,
        )

    await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))

    if message.text == RoutersCommands.CANCEL:
        return await __exit(game=game)

    penalty_id_telegram: str | None = None
    for id_telegram, data in game['players'].items():
        if data['name'] == message.text:
            penalty_id_telegram: str = id_telegram
            break

    if penalty_id_telegram:
        game['players'][penalty_id_telegram]['statistic']['top_penalties'] += 1
        await process_game_in_redis(redis_key=game['redis_key'], set_game=game)
        return await __exit(game=game)
    else:
        await process_game_in_redis(redis_key=game['redis_key'], release=True)


# TODO. –î–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Å–ª–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
#       –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —É–≥–∞–¥—ã–≤–∞–Ω–∏–π.
async def __process_in_game_answer(
    game: dict[str, Any],
    is_correct: bool,
    message: Message,
) -> None:
    """
    –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–Ω–æ–≤–∏–¥—Ü–∞ –∏ —Å–ª–æ–≤–æ –¥–ª—è
    –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–∞ –ø–æ –ø–µ—Ä–µ—Å–∫–∞–∑—É —Å–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.

    –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–≥—Ä–æ–∫–∞–º.
    """
    await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))

    # INFO. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç –¥–∞–±–ª-–∫–ª–∏–∫–æ–≤.
    datetime_now: datetime = datetime.now()
    last_check_answer_datetime: datetime = datetime.fromisoformat(game['last_check_answer_datetime'])
    if datetime_now < last_check_answer_datetime + timedelta(seconds=5):
        return
    game['last_check_answer_datetime'] = datetime_now.strftime('%Y-%m-%d %H:%M:%S.%f')

    if is_correct:
        game['round_correct_count'] += 1
        card_ids: list[str, str] = redis_get(key=RedisKeys.GAME_WORDS.format(number=game['number']))
        game['round_correct_words'].append(card_ids[game['card_index']][0])
    else:
        game['round_incorrect_count'] += 1
    await __send_new_word(game=game)


async def __process_in_game_start_round(
    game: dict[str, Any],
    message: Message,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥"."""
    await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))

    game['status'] = GameStatus.ROUND_IS_STARTED
    answer: Message = await bot.send_message(
        chat_id=game['players_dreaming_order'][game['supervisor_index']],
        text='–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!',
        reply_markup=KEYBOARD_LOBBY_SUPERVISOR_IN_GAME,
    )
    await set_user_messages_to_delete(
        event_key=MessagesEvents.ROUND_STARTED,
        messages=[answer],
    )

    await __send_new_word(game=game)

    scheduler.add_job(
        id=SchedulerJobNames.GAME_END_ROUND.format(number=game['number']),
        func=__process_in_game_end_round_ask_for_retail,
        trigger='date',
        next_run_time=datetime.now(tz=Timezones.MOSCOW) + timedelta(minutes=2),
        kwargs={'redis_key': game['redis_key']},
    )


async def __process_in_game_home(
    game: dict[str, Any],
    message: Message,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–î–æ–º–æ–∏ÃÜ"."""
    game['players'].pop(str(message.from_user.id), None)
    if len(game['players']) == 0:
        await process_game_in_redis(redis_key=game['redis_key'], delete=True)
        process_avaliable_game_numbers(remove_number=game['number'])
    else:
        if game['status'] == GameStatus.IN_LOBBY:
            if len(game['players']) < GameParams.PLAYERS_MIN:
                process_avaliable_game_numbers(add_number=game['number'])
            await bot.edit_message_text(
                chat_id=game['host_chat_id'],
                message_id=game['host_lobby_message_id'],
                text=form_lobby_host_message(game=game),
            )
        await process_game_in_redis(redis_key=game['redis_key'], set_game=game)

    await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))
    await delete_user_messages(chat_id=message.chat.id, all_event_keys=True)
    await state.clear()
    await command_start(message=message)


async def __process_in_game_end_game(
    game: dict[str, Any],
) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É."""

    async def __process_in_game_end_game_send_message(
        text: str,
        chat_id: int,
    ) -> None:
        """–ó–∞–¥–∞—á–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã."""
        answer: Message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=KEYBOARD_HOME,
        )
        await set_user_messages_to_delete(
            event_key=MessagesEvents.GAME_RESULTS,
            messages=[answer],
        )

    async def __process_in_game_end_game_update_user_db(
        data: dict[str, Any],
    ) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞."""
        async with async_session_maker() as session:
            current_statistic: UserStatistic = await user_statistic_crud.retrieve_by_user_id(
                user_id=data['id'],
                session=session,
            )
            for k, v in data['statistic'].items():
                if hasattr(current_statistic, k) and isinstance(v, (int, float)):
                    setattr(current_statistic, k, getattr(current_statistic, k) + v)

            current_achievement: UserAchievement = await user_achievement_crud.retrieve_by_user_id(
                user_id=data['id'],
                session=session,
            )
            for k, v in data['achievements'].items():
                if hasattr(current_achievement, k) and isinstance(v, (int, float)):
                    setattr(current_achievement, k, getattr(current_achievement, k) + v)

            await session.commit()

    def __set_game_achievements(game: dict[str, Any]) -> None:
        """–í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–≥—Ä—É."""
        keys: tuple[str] = (
            'top_penalties',
            'top_score',
            'top_score_buka',
            'top_score_dreamer',
            'top_score_fairy',
            'top_score_sandman',
        )
        for key in keys:
            max_value: int = max((data['statistic'][key] for data in game['players'].values()))
            if max_value == 0:
                continue
            for data in game['players'].values():
                if data['statistic'].get(key, None) == max_value:
                    data['achievements'][key] = 1

    def __set_game_statistics(game: dict[str, Any]) -> None:
        """–í—ã–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –∏–≥—Ä—É."""
        for data in game['players'].values():
            data['statistic']['top_score'] = (
                data['statistic']['top_score_buka'] +
                data['statistic']['top_score_dreamer'] +
                data['statistic']['top_score_fairy'] +
                data['statistic']['top_score_sandman'] -
                data['statistic']['top_penalties']
            )

        max_score: int = max((data['statistic'].get('top_score', 0) for data in game['players'].values()))
        if max_score == 0:
            return
        for data in game['players'].values():
            if data['statistic'].get('top_score', 0) == max_score:
                data['statistic']['total_wins'] = 1

    def __get_results_text(game: dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã."""
        sorted_players = sorted(
            game['players'].values(),
            key=lambda player: player['statistic'].get('top_score', 0),
            reverse=True,
        )
        medals: dict[int, str] = {
            1: 'ü•á ',
            2: 'ü•à ',
            3: 'ü•â ',
        }

        text: list[str] = [
            (
                '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–æ–ª—å —Å—ã–≥—Ä–∞–Ω–∞. –°–æ–Ω –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É, –Ω–æ –º–∞–≥–∏—è –æ—Å—Ç–∞–ª–∞—Å—å —Å –≤–∞–º–∏. '
                '–§–µ–∏ —Ä–∞–¥–æ—Å—Ç–Ω–æ –ø–æ—Ä—Ö–∞—é—Ç –Ω–∞ –ø—Ä–æ—â–∞–Ω–∏–µ, –±—É–∫–∏ –∑–ª–æ–±–Ω–æ –±—É—Ä—á–∞—Ç, –ø–µ—Å–æ—á–Ω—ã–µ —á–µ–ª–æ–≤–µ—á–∫–∏ –º–∞—à—É—Ç –≤–∞–º —Å–≤–æ–∏–º–∏ –º–µ—à–æ—á–∫–∞–º–∏ —Å –ø–µ—Å–∫–æ–º. '
                '–°–µ–≥–æ–¥–Ω—è –≤—ã –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–ª–∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ: —Å–º–µ—è–ª–∏—Å—å, –≥–∞–¥–∞–ª–∏, –ø—É—Ç–∞–ª–∏—Å—å –∏ –ø–æ–º–æ–≥–∞–ª–∏. '
                '–°–ø–∞—Å–∏–±–æ –∑–∞ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚Äî –≤—ã –±—ã–ª–∏ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º–∏!'
                '\n\n'
                '-----------\n'
                '–ò—Ç–æ–≥–∏ –∏–≥—Ä—ã:\n'
                '-----------\n'
            ),
        ]

        i: int = 1
        for data in sorted_players:
            text.append(
                '\n'
                f'{medals.get(i, 'üéñ ')}{data["name"]}:\n'
                f'- –æ–±—â–∏–π —Å—á–µ—Ç: {data["statistic"]["top_score"]}\n'
                f'- –æ—á–∫–∏ –∑–∞ —Ñ–µ—é: {data["statistic"]["top_score_fairy"]}\n'
                f'- –æ—á–∫–∏ –∑–∞ –±—É–∫—É: {data["statistic"]["top_score_buka"]}\n'
                f'- –æ—á–∫–∏ –∑–∞ –ø–µ—Å–æ—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–∫–∞: {data["statistic"]["top_score_sandman"]}\n'
                f'- –æ—á–∫–∏ –∑–∞ —Å–Ω–æ–≤–∏–¥—Ü–∞: {data["statistic"]["top_score_dreamer"]}\n'
                f'- —à—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏: {data["statistic"].get("top_penalties", 0)}\n',
            )
            i += 1

        text.append(
            '\n---------\n'
            '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:'
            '\n---------',
        )

        for a in UserAchievementDescription.return_attr_names():
            players_names: list[str] = []
            for data in sorted_players:
                if a.lower() in data['achievements']:
                    players_names.append(data['name'])
            if players_names:
                players: str = '\n'.join(f'- {player}' for player in players_names)
                text.append('\n\n' + f'{getattr(UserAchievementDescription, a)}:\n{players}')
        return ''.join(text)

    __set_game_statistics(game=game)
    __set_game_achievements(game=game)
    game['status'] = GameStatus.FINISHED
    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)

    tasks: tuple[Task] = (
        asyncio_create_task(__process_in_game_end_game_update_user_db(data=data))
        for data in game['players'].values()
    )
    await asyncio_gather(*tasks)

    text: str = __get_results_text(game=game)
    tasks: tuple[Task] = (
        asyncio_create_task(
            __process_in_game_end_game_send_message(
                text=text,
                chat_id=data['chat_id'],
            ),
        )
        for data in game['players'].values()
    )
    await asyncio_gather(*tasks)


async def __process_in_game_end_round_ask_for_retail(redis_key: str) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—É–Ω–¥ –∏ –ø—Ä–æ—Å–∏—Ç —Å–Ω–æ–≤–∏–¥—Ü–∞ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Å–æ–Ω."""

    async def __process_in_game_end_round_ask_for_retail_send_message(
        chat_id: str,
        text: str,
        game: dict[str, Any],
    ) -> None:
        """–ó–∞–¥–∞—á–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –∏–≥—Ä–æ–∫–æ–≤ –æ –ø—Ä–æ—Å—å–±–µ —Å–Ω–æ–≤–∏–¥—Ü–∞ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Å–æ–Ω."""
        if chat_id == game['players_dreaming_order'][game['dreamer_index']]:
            return

        await delete_user_messages(
            chat_id=chat_id,
            event_key=MessagesEvents.WORD,
        )

        answer: Message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=KEYBOARD_HOME,
        )
        messages_to_delete: list[Message] = [answer]
        if chat_id == game['players_dreaming_order'][game['supervisor_index']]:
            if game['round_correct_words']:
                reply_markup: ReplyKeyboardMarkup = KEYBOARD_LOBBY_SUPERVISOR_IN_GAME_RETELL
            else:
                reply_markup: ReplyKeyboardMarkup = KEYBOARD_LOBBY_SUPERVISOR_IN_GAME_RETELL_FAIL
            answer: Message = await bot.send_message(
                chat_id=chat_id,
                text='–í–µ—Ä–Ω–æ –ª–∏ —Å–Ω–æ–≤–∏–¥–µ—Ü –ø–µ—Ä–µ—Å–∫–∞–∑–∞–ª —Å–≤–æ–π —Å–æ–Ω?',
                reply_markup=reply_markup,
            )
            messages_to_delete.append(answer)
        await set_user_messages_to_delete(event_key=MessagesEvents.RETELL, messages=messages_to_delete)

    game: dict[str, Any] = await process_game_in_redis(redis_key=redis_key, get=True)
    await process_game_in_redis(redis_key=game['redis_key'], release=True)
    # INFO. –ü–æ–∫–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø–µ–Ω–∞–ª—å—Ç–∏ - —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –ø–µ—Ä–µ–±–∏–≤–∞—é—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    while 1:
        if redis_check_exists(key=RedisKeys.GAME_SET_PENALTY.format(number=game['number'])):
            await asyncio_sleep(1)
            continue
        game: dict[str, Any] = await process_game_in_redis(redis_key=redis_key, get=True)
        break

    await delete_user_messages(
        chat_id=game['players_dreaming_order'][game['supervisor_index']],
        event_key=MessagesEvents.ROUND_STARTED,
    )

    text: str = (
        '–¢–∞-–¥–∞! –ê –≤–æ—Ç –∏ —É—Ç—Ä–æ! –ù–æ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –±—É–¥–∏—Ç—å –Ω–∞—à–µ–≥–æ —Å–Ω–æ–≤–∏–¥—Ü–∞, '
        '–ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –≤ –º–µ–ª—å—á–∞–π—à–∏—Ö –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–Ω. '
        '–ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–æ–ª–µ—Ç —Ñ–∞–Ω—Ç–∞–∑–∏–∏, –ø–æ–ª–Ω—ã–π –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö '
        '—Å—É–º–∞—Å–±—Ä–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∏—á—É–¥–ª–∏–≤—ã—Ö —Å—é–∂–µ—Ç–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤! –í–∞–∂–Ω–æ, —á—Ç–æ —Å–Ω–æ–≤–∏–¥–µ—Ü '
        '–≤ —Å–≤–æ–µ–º —Ä–∞—Å—Å–∫–∞–∑–µ –¥–æ–ª–∂–µ–Ω —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ –í–ï–†–ù–û —É–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!'
        '\n\n'
    )
    if game['round_correct_count'] == 0:
        text += (
            '–¢-—Å-—Å! –ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ, —á—Ç–æ —Å–Ω–æ–≤–∏–¥–µ—Ü –Ω–µ —É–≥–∞–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞! '
            '–ü—É—Å—Ç—å –ø–æ—Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–µ—Ç üòâ'
        )
    else:
        words: str = '\n'.join(f'- {word}' for word in game['round_correct_words'])
        text += '–ê –≤–æ—Ç –∏ —Å–∞–º–∏ —Å–ª–æ–≤–∞ (—Ç-—Å-—Å, –Ω–µ –≥–æ–≤–æ—Ä–∏ —Å–Ω–æ–≤–∏–¥—Ü—É!):\n' + words

    game['status'] = GameStatus.WAIT_DREAMER_RETAILS
    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)

    tasks: tuple[Task] = (
        asyncio_create_task(
            __process_in_game_end_round_ask_for_retail_send_message(
                text=text,
                chat_id=data['chat_id'],
                game=game,
            ),
        )
        for data in game['players'].values()
    )
    await asyncio_gather(*tasks)


async def __process_in_game_end_round_ask_for_retail_confirm(
    game: dict[str, Any],
    message: Message,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å–Ω–∞ —Å–Ω–æ–≤–∏–¥—Ü–∞."""

    async def __delete_retell_messages(chat_id: str) -> None:
        """–ó–∞–¥–∞—á–∞ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–µ—Ä–µ—Å–∫–∞–∑–µ —Å–Ω–∞ —Å–Ω–æ–≤–∏–¥—Ü–∞."""
        await delete_user_messages(chat_id=chat_id, event_key=MessagesEvents.RETELL)

    await delete_messages_list(chat_id=message.chat.id, messages_ids=(message.message_id,))
    tasks: tuple[Task] = (
        asyncio_create_task(__delete_retell_messages(chat_id=data['chat_id']))
        for data in game['players'].values()
    )
    await asyncio_gather(*tasks)

    if game['round_correct_words'] and message.text == RoutersCommands.WORD_CORRECT:
        game['round_user_retell_dream_correct'] = True
    else:
        game['round_user_retell_dream_correct'] = False
    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)
    await __process_in_game_end_round(redis_key=game['redis_key'])


# -----------------------------------------------------------------------------
# INFO. –û–±—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.
# -----------------------------------------------------------------------------


async def process_game_in_redis(
    redis_key: str | None = None,
    message: Message | None = None,
    user_id_telegram: str | int | None = None,
    get: bool = False,
    delete: bool = False,
    release: bool = False,
    set_game: dict[str, Any] | None = None,
) -> dict[str, Any] | None:
    if not redis_key:
        if not user_id_telegram:
            user_id_telegram: int = message.from_user.id
        number: str = redis_get(key=RedisKeys.USER_GAME_LOBBY_NUMBER.format(id_telegram=str(user_id_telegram)))
        redis_key: str = RedisKeys.GAME_LOBBY.format(number=number)

    # TODO. –ü–æ—Å—ã–ª–∞—Ç—å –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å. –ü–æ–¥—É–º–∞—Ç—å, –∫–∞–∫ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    # INFO. redis_key=src_lobby_{number}
    number: str = redis_key.split('_')[-1]
    if get or release:
        # INFO. –ï—Å—Ç—å —à–∞–Ω—Å, —á—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç –¥–∞–Ω–Ω—ã–µ
        #       –∏–≥—Ä—ã –≤ Redis –∏ –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏.
        if release:
            redis_delete(key=RedisKeys.GAME_LOBBY_BLOCKED.format(number=number))
        else:
            while 1:
                if redis_check_exists(key=RedisKeys.GAME_LOBBY_BLOCKED.format(number=number)):
                    await asyncio_sleep(0.05)
                    continue
                break
            redis_set(key=RedisKeys.GAME_LOBBY_BLOCKED.format(number=number), value=1, ex_sec=TimeIntervals.SECOND_ONE)
            return redis_get(key=redis_key)

    elif delete:
        redis_delete(key=redis_key)
        redis_delete(key=RedisKeys.GAME_LOBBY_BLOCKED.format(number=number))
    elif set_game:
        redis_set(key=redis_key, value=set_game)
        redis_delete(key=RedisKeys.GAME_LOBBY_BLOCKED.format(number=number))


async def __send_game_role_message(
    data: dict[str, Any],
    roles_images: dict[str, str],
    supervisor_id_telegram: str,
):
    """–ó–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ–ª—å—é –∏–≥—Ä–æ–∫—É."""
    # TODO. –î–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã —Å–ø—è—â–µ–º—É.
    if data['role'] == GameRoles.DREAMER:
        reply_markup: ReplyKeyboardRemove = ReplyKeyboardRemove()
    else:
        reply_markup: ReplyKeyboardMarkup = KEYBOARD_HOME
    answer: Message = await bot.send_photo(
        chat_id=data['chat_id'],
        # TODO. –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Å–∫—Ä—ã—Ç—å –∑–∞ —Å–ø–æ–π–ª–µ—Ä.
        photo=roles_images[data['role']],
        caption=__get_role_description(role=data['role']),
        reply_markup=reply_markup,
    )
    messages: list[Message] = [answer]

    if data['chat_id'] == supervisor_id_telegram:
        messages.append(await __notify_supervisor(chat_id=data['chat_id']))

    await set_user_messages_to_delete(event_key=MessagesEvents.ROLE, messages=messages)



async def send_game_roles_messages(game: dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º —Å –∏—Ö —Ä–æ–ª—è–º–∏."""

    def __set_players_roles(game: dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–≥—Ä—ã "game"."""
        roles: list[str] = __get_players_roles(players_count=len(game['players']))
        shuffle(roles)

        i: int = 0
        for id_telegram, data in game['players'].items():
            if id_telegram == game['players_dreaming_order'][game['dreamer_index']]:
                data['role'] = GameRoles.DREAMER
            else:
                data['role'] = roles[i]
                i += 1

    __set_players_roles(game=game)
    roles_images: dict[str, str] = await get_role_image_cards()
    tasks: tuple[Task] = (
        asyncio_create_task(
            __send_game_role_message(
                data=data,
                roles_images=roles_images,
                supervisor_id_telegram=game['players_dreaming_order'][game['supervisor_index']],
            ),
        )
        for data in game['players'].values()
    )
    await asyncio_gather(*tasks)

    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)


def __choose_drop_game_text(
    is_leave: bool = False,
    is_run_out_of_players: bool = False,
) -> str:
    """–†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç."""
    if is_leave:
        choses: list[str] = [
            '–¢—ã –ø–æ–∫–∏–Ω—É–ª –º–∏—Ä —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –û–±—Ä–∞–∑—ã —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª–∏—Å—å, –∞ —Å–º—ã—Å–ª—ã —Ç–∞–∫ –∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–ª–∏—Å—å..',
            '–¢—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è. –°–Ω—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–∑–∞–¥–∏ ‚Äî –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, –Ω–µ—Ä–∞–∑–≥–∞–¥–∞–Ω–Ω—ã–µ, –∑–∞–±—ã—Ç—ã–µ..',
            '–¢—ã –≤—ã—Ä–≤–∞–ª—Å—è –∏–∑ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π. –ù–æ –∑–∞ –∏—Ö –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤—Å—ë –µ—â—ë —Å–ª—ã—à–Ω—ã –æ—Ç–≥–æ–ª–æ—Å–∫–∏ —á—É–∂–∏—Ö –≥–æ–ª–æ—Å–æ–≤..',
            '–ì—Ä–µ–∑—ã —Ä–∞—Å—Å—ã–ø–∞–ª–∏—Å—å, –∫–∞–∫ –ø—ã–ª—å –≤ –ª—É–Ω–Ω–æ–º —Å–≤–µ—Ç–µ. –¢—ã –ø–æ–∫–∏–Ω—É–ª –º–∏—Ä —Å–Ω–æ–≤ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ..',
            '–¢—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è.. –ù–∞–¥ —Ç–æ–±–æ–π —Å–∫–ª–æ–Ω–∏–ª—Å—è –ë–∞–±–∞–π–∫–∞ –∏ —Ç–∏—Ö–æ –ø—Ä–æ—à–µ–ø—Ç–∞–ª: ¬´–°–ª–∞–±–∞–∫¬ª..',
            '–¢—ã –≤—ã–Ω—ã—Ä–Ω—É–ª –∏–∑ –≥—Ä—ë–∑, –∫–∞–∫ –∏–∑ –≤–∞–Ω–Ω–æ–π —Å –ø–µ–Ω–æ–π. –ê –≤–µ—á–µ—Ä–∏–Ω–∫–∏-—Ç–æ –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞..',
            '–¢—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è.. –ò —Ç–µ–ø–µ—Ä—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∑–Ω–∞–µ—à—å, –∫—Ç–æ –∂–µ –±—ã–ª –≤ –∫–æ—Å—Ç—é–º–µ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞.',
        ]
    elif is_run_out_of_players:
        choses: list[str] = [
            '–°–Ω–æ–≤–∏–¥—Ü—ã —Å—Ç–∞–ª–∏ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º.. –°–æ–Ω –¥—Ä–æ–≥–Ω—É–ª.. –ò —Ä–∞—Å—Å—ã–ø–∞–ª—Å—è..',
            '–°–æ–Ω –æ–±–æ—Ä–≤–∞–ª—Å—è, –∫–∞–∫ –Ω–µ–¥–æ–ø–∏—Å–∞–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞. –ö—Ç–æ-—Ç–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è ‚Äî –∏ –≤—Å—ë –∏—Å—á–µ–∑–ª–æ.',
            '–ö—Ç–æ-—Ç–æ –ø–æ–∫–∏–Ω—É–ª —á–∞—â—É —Å–Ω–æ–≤, –∏ —Ç—Ä–æ–ø—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞—Ä–æ—Å–ª–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞..',
            '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ø–∞–ª–∞—Å—å, –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–Ω—ã–π –¥–æ–º–∏–∫. –ë–µ–∑ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–≥—Ä–∞ ‚Äî –Ω–µ –∏–≥—Ä–∞..',
            '–¢—ã —É—à—ë–ª. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±—É–¥–∏–ª–∏—Å—å –≤ —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç–∏. –°–Ω—ã –∏—Å—á–µ–∑–ª–∏.. –ë–µ–∑ –ø—Ä–æ—â–∞–Ω–∏—è..',
        ]
    return choice(choses)


async def __game_drop_move_indexes(
    game: dict[str, Any],
    message: Message,
) -> None:
    id_telegram: str = str(message.from_user.id)
    player_index: int = game['players_dreaming_order'].index(id_telegram)
    game['players_dreaming_order'].pop(player_index)
    game['players'].pop(id_telegram)

    # INFO. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —Å–¥–≤–∏–Ω—É—Ç—ã –Ω–∞ +1
    #       –≤ —Ñ—É–Ω–∫—Ü–∏–∏ __process_in_game_end_round.
    if player_index > game['dreamer_index']:
        if player_index < game['supervisor_index']:
            game['supervisor_index'] -= 1
        elif player_index == game['supervisor_index']:
            if game['supervisor_index'] > len(game['players_dreaming_order']) - 1:
                game['supervisor_index'] = 0
            await __notify_supervisor(chat_id=game['players_dreaming_order'][game['supervisor_index']])

    elif player_index <= game['dreamer_index']:
        game['dreamer_index'] -= 1
        if game['supervisor_index'] == player_index == 0:
            await __notify_supervisor(chat_id=game['players_dreaming_order'][game['supervisor_index']])
        else:
            game['supervisor_index'] -= 1
        # INFO. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É—à–µ–ª —Å–Ω–æ–≤–∏–¥–µ—Ü, –Ω—É–∂–Ω–æ —Å–≤–µ—Ä–∏—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
        if player_index == game['dreamer_index'] + 1:
            await process_game_in_redis(redis_key=game['redis_key'], set_game=game)
            await __process_in_game_end_round(redis_key=game['redis_key'], skip_results=True)

    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)


def __get_players_roles(players_count: int) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
    """
    # INFO. –ó–∞–≥–ª—É—à–∫–∞, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ —Å—Ä–µ–¥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    #       –∏–≥—Ä–æ–∫ –≤—ã–π–¥–µ—Ç –∏–∑ –∏–≥—Ä—ã.
    if players_count < 4:
        fairy, buka, sandman = 1, 1, 1

    if players_count == 4:
        fairy, buka, sandman = 1, 1, 2
    elif players_count == 5:
        fairy, buka, sandman = 2, 1, 2
    elif players_count == 6:
        fairy, buka, sandman = 3, 2, 1
    elif players_count == 7:
        fairy, buka, sandman = 3, 2, 2
    elif players_count == 8:
        fairy, buka, sandman = 4, 3, 1
    elif players_count == 9:
        fairy, buka, sandman = 4, 3, 2
    elif players_count == 10:
        fairy, buka, sandman = 5, 4, 1
    return [GameRoles.FAIRY] * fairy + [GameRoles.BUKA] * buka + [GameRoles.SANDMAN] * sandman


def __get_players_dreaming_order(players: list[str]) -> list[str]:
    shuffle(players)
    return players


def __get_role_description(role: str) -> str:
    if role == GameRoles.BUKA:
        return (
            '–í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ —Ç—ã ‚Äî –±—É–∫–∞-–º–∏—Ñ–æ–º–∞–Ω. –û–±–º–∞–Ω—ã–≤–∞–π —Å–Ω–æ–≤–∏–¥—Ü–∞, —Å–±–∏–≤–∞–π '
            '–µ–≥–æ —Å –ø—É—Ç–∏, –ø—Ä–µ–≤—Ä–∞—Ç–∏ –µ–≥–æ —Å–Ω—ã –≤ –∫–æ—à–º–∞—Ä—ã! –¢–≤–æ—è —Ü–µ–ª—å: —á—Ç–æ–±—ã —Å–Ω–æ–≤–∏–¥–µ—Ü '
            '–Ω–µ –æ—Ç–≥–∞–¥–∞–ª –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ —Å–ª–æ–≤–∞!'
        )
    if role == GameRoles.FAIRY:
        return (
            '–í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ —Ç—ã ‚Äî –¥–æ–±—Ä–∞—è —Ñ–µ—è (–Ω—É –∏–ª–∏ –¥–æ–±—Ä—ã–π —Ñ–µ–π). –í—Å—è—á–µ—Å–∫–∏ –ø–æ–º–æ–≥–∞–π '
            '—Å–Ω–æ–≤–∏–¥—Ü—É –ø—Ä–æ–π—Ç–∏ –ø–æ –µ–≥–æ –Ω–µ–ª–µ–≥–∫–æ–º—É –ø—É—Ç–∏. –¢–≤–æ—è —Ü–µ–ª—å: —á—Ç–æ–±—ã —Å–Ω–æ–≤–∏–¥–µ—Ü '
            '–æ—Ç–≥–∞–¥–∞–ª –≤—Å–µ-–≤—Å–µ-–≤—Å–µ —Å–ª–æ–≤–∞!'
        )
    if role == GameRoles.SANDMAN:
        return (
            '–í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ —Ç—ã ‚Äî –ø–µ—Å–æ—á–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ–∫. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ö—Ä—É–ø–∫–∏–π –º–∏—Ä '
            '—Å–Ω–æ–≤ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏. –ü–æ–º–æ–≥–∞–π —Å–Ω–æ–≤–∏–¥—Ü—É –æ—Ç–±–∏–≤–∞—Ç—å—Å—è –æ—Ç –∫–æ—à–º–∞—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ '
            '—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, —Å–±–∏–≤–∞–π –µ–≥–æ —Å –ø—É—Ç–∏, –µ—Å–ª–∏ –ø—É—Ç—å –µ–≥–æ —Å–ª–∏—à–∫–æ–º –ª–µ–≥–æ–∫. '
            '–¢–≤–æ—è —Ü–µ–ª—å: —á—Ç–æ–±—ã —Å–Ω–æ–≤–∏–¥–µ—Ü –æ—Ç–≥–∞–¥–∞–ª —Ä–æ–≤–Ω–æ –ø–æ–ª–æ–≤–∏–Ω—É —Å–ª–æ–≤!'
        )
    if role == GameRoles.DREAMER:
        return (
            '–í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ —Ç—ã ‚Äî —Å–Ω–æ–≤–∏–¥–µ—Ü. –¢–≤–æ–π —Ä–∞–∑—É–º –ø–∞—Ä–∏—Ç –≤ –≥–ª—É–±–∏–Ω–∞—Ö –≥—Ä—ë–∑, –≥–¥–µ '
            '–¥–æ–±—Ä–æ –∏ –∑–ª–æ –ø–ª–µ—Ç—É—Ç —É–∑–æ—Ä—ã —Ç–≤–æ–∏—Ö —Å–Ω–æ–≤. –ü—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Å—è –∫ –≥–æ–ª–æ—Å–∞–º ‚Äî –Ω–æ –ø–æ–º–Ω–∏, '
            '–Ω–µ –≤—Å–µ –æ–Ω–∏ –∂–µ–ª–∞—é—Ç —Ç–µ–±–µ –¥–æ–±—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–Ω—è—Ç—å, –∫—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç, '
            '–∞ –∫—Ç–æ —É–≤–æ–¥–∏—Ç –≤ —á–∞—â—É –∫–æ—à–º–∞—Ä–æ–≤.. –¢–≤–æ—è —Ü–µ–ª—å: –æ—Ç–≥–∞–¥–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–ª–æ–≤! '
            '–¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã–≤–∞–π –≥–ª–∞–∑–∞, –±–∞—é-–±–∞–π. –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!'
        )
    if role == GameRoles.SUPERVISOR:
        return (
            '–¢–∞–∫–∂–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ —Ç—ã ‚Äî –•—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–Ω–∞. –¢—ã —Å–ª–µ–¥–∏—à—å –∑–∞ —Ç–µ–º, –∫–∞–∫ '
            '—Å–Ω–æ–≤–∏–¥–µ—Ü –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–≤–æ–π –ø—É—Ç—å, –∏ –≤–∏–¥–∏—à—å –≤—Å—ë: –ø—Ä–∞–≤–¥—É, –ª–æ–∂—å, —Å–æ–º–Ω–µ–Ω–∏—è –∏ –∫–æ–ª–µ–±–∞–Ω–∏—è. '
            '–û—Ç–º–µ—á–∞–π –≤–µ—Ä–Ω–æ –∏–ª–∏ –æ—à–∏–±–æ—á–Ω–æ –±—ã–ª–∏ –Ω–∞–∑–≤–∞–Ω—ã —Å–Ω–æ–≤–∏–¥—Ü–µ–º —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–∞–≤–∞–π —à—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏, '
            '–∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω—ã —Ü–∞—Ä—Å—Ç–≤–∞ —Å–Ω–æ–≤. –ò –Ω–µ –∑–∞–±—ã–≤–∞–π ‚Äî —Ç—ã —Ç–æ–∂–µ –∏–≥—Ä–∞–µ—à—å.'
        )


async def __notify_supervisor(chat_id: int) -> Message:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –•—Ä–∞–Ω–∏—Ç–µ–ª—è —Å–Ω–∞ –æ –µ–≥–æ —Ä–æ–ª–∏."""
    return await bot.send_message(
        chat_id=chat_id,
        text=__get_role_description(role=GameRoles.SUPERVISOR),
        reply_markup=KEYBOARD_LOBBY_SUPERVISOR,
    )


# TODO: –î–æ–¥–µ–ª–∞—Ç—å
async def __process_in_game_end_round(
    redis_key: str,
    skip_results: bool = False,
) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—É–Ω–¥."""

    async def __process_in_game_end_round_delete_roles(chat_id: str | int) -> None:
        await delete_user_messages(chat_id=chat_id, event_key=MessagesEvents.ROLE)

    game: dict[str, Any] = await process_game_in_redis(redis_key=redis_key, get=True)

    # TODO. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ tuple –≤–µ–∑–¥–µ.
    tasks: tuple[Task] = (
        asyncio_create_task(
            __process_in_game_end_round_delete_roles(chat_id=data['chat_id']),
        )
        for data in game['players'].values()
    )
    await asyncio_gather(*tasks)

    if not skip_results:
        __set_round_achievements(game=game)
        __set_round_points(game=game)

    if game['dreamer_index'] == len(game['players_dreaming_order']) - 1:
        return await __process_in_game_end_game(game=game)

    game['dreamer_index'] += 1
    if game['supervisor_index'] == len(game['players_dreaming_order']) - 1:
        game['supervisor_index'] = 0
    else:
        game['supervisor_index'] += 1

    game['status'] = GameStatus.PREPARE_NEXT_ROUND
    game['round_correct_count'] = 0
    game['round_incorrect_count'] = 0
    game['round_correct_words'] = []

    await send_game_roles_messages(game=game)
    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)


async def __send_new_word(game: dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤–∞ –∏–≥—Ä–æ–∫–∞–º –∏ —Å–º–µ—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏–≥—Ä–µ."""
    game['card_index'] += 1
    game_cards_ids: list[str, str] = redis_get(key=RedisKeys.GAME_WORDS.format(number=game['number']))
    tasks: tuple[Task] = (
        asyncio_create_task(
            __send_new_word_to_player(
                id_telegram=id_telegram,
                data=data,
                game=game,
                game_cards_ids=game_cards_ids,
            ),
        )
        for id_telegram, data in game['players'].items()
    )
    await asyncio_gather(*tasks)
    await process_game_in_redis(redis_key=game['redis_key'], set_game=game)


async def __send_new_word_to_player(
    id_telegram: str,
    data: dict[str, Any],
    game: dict[str, Any],
    game_cards_ids: list[str, str],
    send_supervisor_keyboard: bool = False,
) -> None:
    """–ó–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤–∞ –∏–≥—Ä–æ–∫—É."""
    if id_telegram == game['players_dreaming_order'][game['dreamer_index']]:
        return

    await delete_user_messages(
        chat_id=data['chat_id'],
        event_key=MessagesEvents.WORD,
    )
    if send_supervisor_keyboard:
        answer: Message = await bot.send_photo(
            chat_id=data['chat_id'],
            photo=game_cards_ids[game['card_index']][1],
            reply_markup=KEYBOARD_LOBBY_SUPERVISOR_IN_GAME,
        )
    else:
        answer: Message = await bot.send_photo(
            chat_id=data['chat_id'],
            photo=game_cards_ids[game['card_index']][1],
        )
    await set_user_messages_to_delete(
        event_key=MessagesEvents.WORD,
        messages=(answer,),
    )


def __set_round_achievements(
    game: dict[str, Any],
):
    """–í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–∞—É–Ω–¥."""
    for data in game['players'].values():
        if data['role'] != GameRoles.DREAMER:
            continue

        if game['round_correct_count'] == 0:
            data['achievements']['nightmare'] = 1
        elif (
            game['round_correct_count'] >= 4
            and
            game['round_incorrect_count'] == 0
            and
            game['round_user_retell_dream_correct']
        ):
            data['achievements']['dream_master'] = 1


def __set_round_points(
    game: dict[str, Any],
):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ —Ä–∞—É–Ω–¥."""
    if game['round_incorrect_count'] == game['round_correct_count']:
        sandman_points: int = game['round_correct_count'] + 2
    else:
        answers_balance: int = abs(game['round_correct_count'] - game['round_incorrect_count'])
        if answers_balance == 1:
            sandman_points: int = max(game['round_correct_count'], game['round_incorrect_count'])
        else:
            sandman_points: int = min(game['round_correct_count'], game['round_incorrect_count'])

    dreamer_points: int = game['round_correct_count']
    if game['round_user_retell_dream_correct']:
        dreamer_points += 2

    for data in game['players'].values():
        if data['role'] == GameRoles.BUKA:
            data['statistic']['top_score_buka'] += game['round_incorrect_count']
        elif data['role'] == GameRoles.FAIRY:
            data['statistic']['top_score_fairy'] += game['round_correct_count']
        elif data['role'] == GameRoles.SANDMAN:
            data['statistic']['top_score_sandman'] += sandman_points
        elif data['role'] == GameRoles.DREAMER:
            data['statistic']['top_score_dreamer'] += dreamer_points
